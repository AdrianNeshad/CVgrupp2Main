// <auto-generated />
using System;
using CVgrupp2Main.DatabasLager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CVgrupp2Main.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250108101014_AddNewPersonData")]
    partial class AddNewPersonData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Erfarenheter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Erfarenheter");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Beskrivning = "Systemutvecklare",
                            Titel = "Polismyndigheten CTO"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Kompetenser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kompetenser");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Beskrivning = "Tjuvstarta o sånt",
                            Titel = "Mecka med bilar"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Kontaktuppgifter", b =>
                {
                    b.Property<int>("KontaktID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KontaktID"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefonnummer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KontaktID");

                    b.ToTable("Kontaktuppgifter");

                    b.HasData(
                        new
                        {
                            KontaktID = 1,
                            Adress = "Brickebacken 123",
                            Email = "ABC@edunet.oru.se",
                            Telefonnummer = "+46 123"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Meddelande", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("HarLästs")
                        .HasColumnType("bit");

                    b.Property<string>("Innehåll")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Meddelande");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HarLästs = false,
                            Innehåll = "A"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Person", b =>
                {
                    b.Property<string>("Användarnamn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Efternamn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Förnamn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KontaktID")
                        .HasColumnType("int");

                    b.Property<string>("Lösenord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Privat")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilBild")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Användarnamn");

                    b.HasIndex("KontaktID")
                        .IsUnique();

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Användarnamn = "A",
                            Efternamn = "Bolognese",
                            Förnamn = "Pasta",
                            KontaktID = 1,
                            Lösenord = "Abc123",
                            Privat = false
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonErfarenheter", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("PersonID")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID", "PersonID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonErfarenheter");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PersonID = "A"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonKompetenser", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("PersonID")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID", "PersonID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonKompetenser");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PersonID = "A"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonMottagitMeddelande", b =>
                {
                    b.Property<string>("Användarnamn")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MeddelandeID")
                        .HasColumnType("int");

                    b.HasKey("Användarnamn", "MeddelandeID");

                    b.HasIndex("MeddelandeID");

                    b.ToTable("PersonMottagitMeddelande");

                    b.HasData(
                        new
                        {
                            Användarnamn = "A",
                            MeddelandeID = 1
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonProjekt", b =>
                {
                    b.Property<int>("ProjektID")
                        .HasMaxLength(255)
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Medverkande")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(1);

                    b.HasKey("ProjektID", "Medverkande");

                    b.HasIndex("Medverkande");

                    b.ToTable("PersonProjekt");

                    b.HasData(
                        new
                        {
                            ProjektID = 1,
                            Medverkande = "A"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonSkickatMeddelande", b =>
                {
                    b.Property<string>("Användarnamn")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MeddelandeID")
                        .HasColumnType("int");

                    b.HasKey("Användarnamn", "MeddelandeID");

                    b.HasIndex("MeddelandeID");

                    b.ToTable("PersonSkickatMeddelande");

                    b.HasData(
                        new
                        {
                            Användarnamn = "A",
                            MeddelandeID = 1
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonUtbildningar", b =>
                {
                    b.Property<string>("PersonID")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UtbildningID")
                        .HasColumnType("int");

                    b.HasKey("PersonID", "UtbildningID");

                    b.HasIndex("UtbildningID");

                    b.ToTable("PersonUtbildningar");

                    b.HasData(
                        new
                        {
                            PersonID = "A",
                            UtbildningID = 1
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Projekt", b =>
                {
                    b.Property<int>("ProjektID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjektID"));

                    b.Property<string>("Beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skapare")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ProjektID");

                    b.HasIndex("Skapare");

                    b.ToTable("Projekt");

                    b.HasData(
                        new
                        {
                            ProjektID = 1,
                            Beskrivning = "Programmera .NET",
                            Namn = ".NET",
                            Skapare = "A"
                        });
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Utbildningar", b =>
                {
                    b.Property<int>("UtbildningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtbildningID"));

                    b.Property<string>("Beskrivning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtbildningID");

                    b.ToTable("Utbildningar");

                    b.HasData(
                        new
                        {
                            UtbildningID = 1,
                            Beskrivning = "Becknarkunskap",
                            Namn = "Vivalla University"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Person", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Kontaktuppgifter", "Kontaktuppgifter")
                        .WithOne("Person")
                        .HasForeignKey("CVgrupp2Main.DatabasLager.Person", "KontaktID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kontaktuppgifter");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonErfarenheter", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Erfarenheter", "Erfarenheter")
                        .WithMany("HarErfarenhet")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVgrupp2Main.DatabasLager.Person", "Person")
                        .WithMany("HarErfarenhet")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Erfarenheter");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonKompetenser", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Kompetenser", "Kompetenser")
                        .WithMany("HarKompetens")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVgrupp2Main.DatabasLager.Person", "Person")
                        .WithMany("HarKompetens")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kompetenser");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonMottagitMeddelande", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Person", "Person")
                        .WithMany("HarMottagit")
                        .HasForeignKey("Användarnamn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVgrupp2Main.DatabasLager.Meddelande", "Meddelande")
                        .WithMany("HarMottagit")
                        .HasForeignKey("MeddelandeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meddelande");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonProjekt", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Person", "Person")
                        .WithMany("HarMedverkat")
                        .HasForeignKey("Medverkande")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CVgrupp2Main.DatabasLager.Projekt", "Projekt")
                        .WithMany("HarMedverkat")
                        .HasForeignKey("ProjektID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Projekt");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonSkickatMeddelande", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Person", "Person")
                        .WithMany("HarSkickat")
                        .HasForeignKey("Användarnamn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVgrupp2Main.DatabasLager.Meddelande", "Meddelande")
                        .WithMany("HarSkickat")
                        .HasForeignKey("MeddelandeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meddelande");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.PersonUtbildningar", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Person", "Person")
                        .WithMany("HarUtbildning")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVgrupp2Main.DatabasLager.Utbildningar", "Utbildningar")
                        .WithMany("HarUtbildning")
                        .HasForeignKey("UtbildningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Utbildningar");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Projekt", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.Person", "Person")
                        .WithMany("HarProjekt")
                        .HasForeignKey("Skapare")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVgrupp2Main.DatabasLager.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CVgrupp2Main.DatabasLager.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Erfarenheter", b =>
                {
                    b.Navigation("HarErfarenhet");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Kompetenser", b =>
                {
                    b.Navigation("HarKompetens");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Kontaktuppgifter", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Meddelande", b =>
                {
                    b.Navigation("HarMottagit");

                    b.Navigation("HarSkickat");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Person", b =>
                {
                    b.Navigation("HarErfarenhet");

                    b.Navigation("HarKompetens");

                    b.Navigation("HarMedverkat");

                    b.Navigation("HarMottagit");

                    b.Navigation("HarProjekt");

                    b.Navigation("HarSkickat");

                    b.Navigation("HarUtbildning");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Projekt", b =>
                {
                    b.Navigation("HarMedverkat");
                });

            modelBuilder.Entity("CVgrupp2Main.DatabasLager.Utbildningar", b =>
                {
                    b.Navigation("HarUtbildning");
                });
#pragma warning restore 612, 618
        }
    }
}
